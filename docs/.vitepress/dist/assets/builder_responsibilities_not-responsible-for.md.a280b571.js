import{_ as s,c as a,o as n,d as e}from"./app.98e9ab83.js";const C=JSON.parse('{"title":"Not Responsible For","description":"","frontmatter":{},"headers":[{"level":2,"title":"Backend Requests","slug":"backend-requests","link":"#backend-requests","children":[]},{"level":2,"title":"No Global State","slug":"no-global-state","link":"#no-global-state","children":[]},{"level":2,"title":"No Routing","slug":"no-routing","link":"#no-routing","children":[]},{"level":2,"title":"A Pages Layout","slug":"a-pages-layout","link":"#a-pages-layout","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]}],"relativePath":"builder/responsibilities/not-responsible-for.md"}'),o={name:"builder/responsibilities/not-responsible-for.md"},l=e(`<h1 id="not-responsible-for" tabindex="-1">Not Responsible For <a class="header-anchor" href="#not-responsible-for" aria-hidden="true">#</a></h1><p>One of the most exciting things about this architecture, is the narrow focus of responsibilities you have as a builder. This is a good thing! It means you&#39;re less likely to get overwhelmed, have the chance to get highly adept at building components (because you&#39;re not distracted by other concepts), and will be able to contribute to a <strong>real, live codebase</strong> far sooner than if you had to understand the entire system!</p><h2 id="backend-requests" tabindex="-1">Backend Requests <a class="header-anchor" href="#backend-requests" aria-hidden="true">#</a></h2><p>Builders only create leaf components, and leaf components NEVER make backend requests</p><p>‚ùå No backend requests</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> commentsFetcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useFetchResources</span><span style="color:#A6ACCD;">(Comment)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Sweet! That&#39;s one less thing you have to worry about until you&#39;re ready to become a stitcher ü™°</span></span>
<span class="line"></span></code></pre></div><h2 id="no-global-state" tabindex="-1">No Global State <a class="header-anchor" href="#no-global-state" aria-hidden="true">#</a></h2><p>You don&#39;t have to worry about global state, it&#39;s handled by stitchers. The components a builder builds, simply accept props, and emit events.</p><p>‚ùå No global state</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> commentsRepo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRepo</span><span style="color:#A6ACCD;">(Comment)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="no-routing" tabindex="-1">No Routing <a class="header-anchor" href="#no-routing" aria-hidden="true">#</a></h2><p>Yep, that&#39;s right. You don&#39;t have to think about routing until you become a stitcher!</p><p>‚ùå No knowledge of the current route</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> route </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRoute</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="a-pages-layout" tabindex="-1">A Pages Layout <a class="header-anchor" href="#a-pages-layout" aria-hidden="true">#</a></h2><p>organizing our components on a page can get surprisingly complicated and finicky. Builders don&#39;t have to worry about layout, they only create the &quot;building blocks&quot; of an app.</p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-hidden="true">#</a></h2><p>It&#39;s worth repeating that as a <strong>builder</strong>, you never ever make backend requests, deal with global state, or pollute your components with knowledge of the route:</p><p>‚ùå No backend requests</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> commentsFetcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useFetchResources</span><span style="color:#A6ACCD;">(Comment)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>‚ùå No global state</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> commentsRepo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRepo</span><span style="color:#A6ACCD;">(Comment)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>‚ùå No knowledge of the current route</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lang</span><span style="color:#A6ACCD;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> route </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRoute</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>If any of this doesn&#39;t make sense, please clarify with a stitcher, artisan or architect! Following those three rules is fundamental to being an effective builder!</p>`,25),t=[l];function p(r,c,i,y,u,D){return n(),a("div",null,t)}const F=s(o,[["render",p]]);export{C as __pageData,F as default};

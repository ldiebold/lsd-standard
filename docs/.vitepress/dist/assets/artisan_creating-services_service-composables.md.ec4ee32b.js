import{_ as s,c as a,o as e,d as n}from"./app.98e9ab83.js";const F=JSON.parse('{"title":"Creating Robust Service Composables","description":"","frontmatter":{},"headers":[{"level":2,"title":"MaybeComputedRef","slug":"maybecomputedref","link":"#maybecomputedref","children":[]},{"level":2,"title":"Callbacks","slug":"callbacks","link":"#callbacks","children":[]},{"level":2,"title":"Config","slug":"config","link":"#config","children":[]},{"level":2,"title":"Function Params","slug":"function-params","link":"#function-params","children":[]},{"level":2,"title":"Error handling","slug":"error-handling","link":"#error-handling","children":[{"level":3,"title":"Notifications","slug":"notifications","link":"#notifications","children":[]},{"level":3,"title":"standardised error handling","slug":"standardised-error-handling","link":"#standardised-error-handling","children":[]}]},{"level":2,"title":"Create","slug":"create","link":"#create","children":[]},{"level":2,"title":"Find","slug":"find","link":"#find","children":[]},{"level":2,"title":"Index","slug":"index","link":"#index","children":[{"level":3,"title":"Related data","slug":"related-data","link":"#related-data","children":[]}]},{"level":2,"title":"Remove","slug":"remove","link":"#remove","children":[]},{"level":2,"title":"Update","slug":"update","link":"#update","children":[]},{"level":2,"title":"Persisting to the store","slug":"persisting-to-the-store","link":"#persisting-to-the-store","children":[]},{"level":2,"title":"Global State","slug":"global-state","link":"#global-state","children":[{"level":3,"title":"configuration","slug":"configuration","link":"#configuration","children":[]},{"level":3,"title":"Allowing for more than one state machine","slug":"allowing-for-more-than-one-state-machine","link":"#allowing-for-more-than-one-state-machine","children":[]},{"level":3,"title":"specifying the data insertion strategy","slug":"specifying-the-data-insertion-strategy","link":"#specifying-the-data-insertion-strategy","children":[]}]},{"level":2,"title":"Default filters (WIP)","slug":"default-filters-wip","link":"#default-filters-wip","children":[]}],"relativePath":"artisan/creating-services/service-composables.md"}'),l={name:"artisan/creating-services/service-composables.md"},o=n(`<h1 id="creating-robust-service-composables" tabindex="-1">Creating Robust Service Composables <a class="header-anchor" href="#creating-robust-service-composables" aria-hidden="true">#</a></h1><h2 id="maybecomputedref" tabindex="-1">MaybeComputedRef <a class="header-anchor" href="#maybecomputedref" aria-hidden="true">#</a></h2><h2 id="callbacks" tabindex="-1">Callbacks <a class="header-anchor" href="#callbacks" aria-hidden="true">#</a></h2><p>on request (e.g. <code>onFetch</code> and <code>onSearch</code>) on authenticated on error When script loaded (most likely not required) <strong>What if callbacks are async?</strong></p><h2 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	valueDark </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dark</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	valueLight </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> defaultWindow</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> options</span></span>
<span class="line"></span></code></pre></div><ul><li>Use provide/inject to allow more than one config (including a default)</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> config </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">defaultProvider</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">providers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">appKey</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SOME_KEY</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">sansar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">appKey</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SOME_KEY</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>use provide/inject to supply config/credentials via a plugin</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> VuePlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">install</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">provide</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">youtube.config.default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">providers</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">defaultProvider</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">providers</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">providers</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">providers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">providerKey</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">provideFeatures</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">providers</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">providerKey</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">providerKey</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>allow default credentials to easily be overwritten with option passed to composable use deepmerge to merge config use deepmerge for things like request params provide an &quot;immediate&quot; option</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> youTubeService </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useYouTube</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">playlist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="function-params" tabindex="-1">Function Params <a class="header-anchor" href="#function-params" aria-hidden="true">#</a></h2><p>params might recieve MaybeComputedRef either first or second param should be an options object</p><h2 id="error-handling" tabindex="-1">Error handling <a class="header-anchor" href="#error-handling" aria-hidden="true">#</a></h2><h3 id="notifications" tabindex="-1">Notifications <a class="header-anchor" href="#notifications" aria-hidden="true">#</a></h3><ul><li>If using &quot;Notify&quot;, decouple notify by using provide/inject to supply a notifier</li><li>Make is possible to disable notifications with an option</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> apiService </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSomeApi</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">notifyOnError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">notifyOnSuccess</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="standardised-error-handling" tabindex="-1">standardised error handling <a class="header-anchor" href="#standardised-error-handling" aria-hidden="true">#</a></h3><p>Here is how we store errors. The structure of the data itself will depend on the backend:</p><ul><li>standardErrors: read only ref</li><li>validationErrors: read only</li><li>hasStandardErrors: computed bool</li><li>hasValidationErrors: computed bool</li><li>hasErrors: computed bool</li></ul><h2 id="create" tabindex="-1">Create <a class="header-anchor" href="#create" aria-hidden="true">#</a></h2><h2 id="find" tabindex="-1">Find <a class="header-anchor" href="#find" aria-hidden="true">#</a></h2><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-hidden="true">#</a></h2><h3 id="related-data" tabindex="-1">Related data <a class="header-anchor" href="#related-data" aria-hidden="true">#</a></h3><ul><li>Will almost always include the following <ul><li><code>with | populate | expose | include...</code> (use the apis naming (e.g. <code>populate</code> with Strapi and <code>expose</code> with dataverse))</li><li><code>filters</code></li><li><code>orderBy | sortBy</code></li><li></li></ul></li></ul><h2 id="remove" tabindex="-1">Remove <a class="header-anchor" href="#remove" aria-hidden="true">#</a></h2><p>We use the word &quot;remove&quot; because &quot;delete&quot; can be problematic (because it exists in the global scope)</p><ul><li>props <ul><li><code>removing</code>: <strong>this is an id, NOT a boolean</strong>. This makes it much easier to handle loading spinners</li><li><code>remove(id)</code>: If &quot;id&quot; is not provided, the ref <code>id</code> is used instead</li><li><code>id</code> ref</li><li></li></ul></li></ul><h2 id="update" tabindex="-1">Update <a class="header-anchor" href="#update" aria-hidden="true">#</a></h2><h2 id="persisting-to-the-store" tabindex="-1">Persisting to the store <a class="header-anchor" href="#persisting-to-the-store" aria-hidden="true">#</a></h2><blockquote><p><strong>Note</strong> :info: the store must be completely decoupled</p></blockquote><h2 id="global-state" tabindex="-1">Global State <a class="header-anchor" href="#global-state" aria-hidden="true">#</a></h2><p>We want to make it as simple as possible</p><blockquote><p>[!warning] do NOT implement global state! The state machine must be swapable, as state is very likely to change</p></blockquote><h3 id="configuration" tabindex="-1">configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h3><p>Indicate</p><h3 id="allowing-for-more-than-one-state-machine" tabindex="-1">Allowing for more than one state machine <a class="header-anchor" href="#allowing-for-more-than-one-state-machine" aria-hidden="true">#</a></h3><h3 id="specifying-the-data-insertion-strategy" tabindex="-1">specifying the data insertion strategy <a class="header-anchor" href="#specifying-the-data-insertion-strategy" aria-hidden="true">#</a></h3><p>There are 3 ways we can insert data</p><ul><li>insert <ul><li>if the id exists, the data is replaced</li><li>if the data does NOT exists, it&#39;s created</li></ul></li><li>replace <ul><li>all data is wiped</li><li>the new data is inserted</li></ul></li><li>withRelated (true by default) <ul><li>insert related data as well</li></ul></li><li></li></ul><h2 id="default-filters-wip" tabindex="-1">Default filters (WIP) <a class="header-anchor" href="#default-filters-wip" aria-hidden="true">#</a></h2><p>Can we have a filter that&#39;s always added to the request? Maybe having a way to get the filter from the model?</p>`,43),t=[o];function p(r,i,c,d,y,h){return e(),a("div",null,t)}const u=s(l,[["render",p]]);export{F as __pageData,u as default};

import{_ as s,c as a,o as n,d as l}from"./app.98e9ab83.js";const F=JSON.parse(`{"title":"Styling","description":"","frontmatter":{},"headers":[{"level":2,"title":"Quasar's utility classes","slug":"quasar-s-utility-classes","link":"#quasar-s-utility-classes","children":[]},{"level":2,"title":"The Rules...","slug":"the-rules","link":"#the-rules","children":[]}],"relativePath":"builder/styling/styling.md"}`),e={name:"builder/styling/styling.md"},t=l(`<h1 id="styling" tabindex="-1">Styling <a class="header-anchor" href="#styling" aria-hidden="true">#</a></h1><h2 id="quasar-s-utility-classes" tabindex="-1">Quasar&#39;s utility classes <a class="header-anchor" href="#quasar-s-utility-classes" aria-hidden="true">#</a></h2><p>Lean HEAVILY on Quasar&#39;s utility classes. They allow us to add margins, paddings, colors, typography etc in a standardized way. Most importantly, spend a good chunk of time deeply understanding</p><ul><li>the <a href="https://quasar.dev/layout/grid/introduction-to-flexbox" target="_blank" rel="noreferrer">grid system</a><ul><li>Also be sure to test your knowledge as you learn with <a href="https://quasar.dev/layout/grid/flex-playground" target="_blank" rel="noreferrer">the playground</a></li></ul></li><li>relative vs absolute positioning (A frustrating quirk of CSS we all have to learn) <ul><li>Note, Quasar has <code>absolute</code>, <code>position-relative</code> and <a href="https://quasar.dev/style/positioning#introduction" target="_blank" rel="noreferrer">many other variants</a> such as <code>absolute-top</code></li></ul></li></ul><blockquote><p>!!!IMPORTANT!!! never ever put a <code>col</code> on a leaf component. Why? Because it makes the component inflexible. A component with <code>col</code> and only exist in one context, and we want <strong>flexible styling</strong> that allows our components to work in any context.</p></blockquote><h2 id="the-rules" tabindex="-1">The Rules... <a class="header-anchor" href="#the-rules" aria-hidden="true">#</a></h2><ul><li>Leaf components CANNOT have any of the following styling on the <strong>root</strong> component (mostly &quot;position&quot; related styling) <ul><li>width/height (however min/max width/height are okay!) <ul><li>Why? Because leaf components must be flexible. The <strong>parent</strong> should be in charge of the width/height.</li></ul></li><li>margins</li><li>padding</li><li>colors (unless supplied as a prop)</li><li><code>col</code> classes (rows and columns are okay, though probably rarely needed). Again, this is the parents job. Most &quot;position related styling&quot; should happen on the parent and is not a builders responsibility.</li></ul></li></ul><p>Please read the above rules again and remember, we&#39;re only talking about the <strong>root</strong> component. All of the above rules are allowed <strong>within</strong> leaf components:</p><p>‚ùå Never hardcode a width, it makes the component inflexible</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width: 400px</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    content</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>‚ùå Never hardcode a <code>col</code>, they make the component inflexible</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">col-4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    content</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>‚ùå Never hardcode a margin, they make the component inflexible</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">q-ma-md</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    content</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>‚úÖ Usually, the root won&#39;t need any styling at all. The component below is flexible, and its styling can be handled by the parent üëç.</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    Content</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,16),o=[t];function p(r,c,i,y,d,u){return n(),a("div",null,o)}const h=s(e,[["render",p]]);export{F as __pageData,h as default};

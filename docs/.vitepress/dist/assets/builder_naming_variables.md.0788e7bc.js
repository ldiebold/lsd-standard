import{_ as s,c as a,o as n,d as l}from"./app.f1aeb96b.js";const F=JSON.parse('{"title":"Variables","description":"","frontmatter":{},"headers":[{"level":2,"title":"Usually Camel Case","slug":"usually-camel-case","link":"#usually-camel-case","children":[]},{"level":2,"title":"snake_case for database fields","slug":"snake-case-for-database-fields","link":"#snake-case-for-database-fields","children":[]},{"level":2,"title":"Avoiding name clashes","slug":"avoiding-name-clashes","link":"#avoiding-name-clashes","children":[{"level":3,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]}]}],"relativePath":"builder/naming/variables.md"}'),e={name:"builder/naming/variables.md"},o=l(`<h1 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-hidden="true">#</a></h1><h2 id="usually-camel-case" tabindex="-1">Usually Camel Case <a class="header-anchor" href="#usually-camel-case" aria-hidden="true">#</a></h2><p>When in doubt, use camel case.</p><h2 id="snake-case-for-database-fields" tabindex="-1">snake_case for database fields <a class="header-anchor" href="#snake-case-for-database-fields" aria-hidden="true">#</a></h2><p>When you see snake_case variables, think &quot;this is how the variable looks in the API&quot;.</p><p>Take this example of code that creates data on the backend:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> postCreator </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCreateResource</span><span style="color:#A6ACCD;">(Post)</span></span>
<span class="line"><span style="color:#A6ACCD;">postCreator</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">form</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The Art Of Vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">postCreator</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">form</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">author_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &lt;&lt; snake_case for multiple words</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">postCreator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>Notice <code>author_id</code> uses snake_case. This is because <strong>api and database fields are always in snake case</strong>. This convention helps communicate when a field is &quot;raw from the api&quot;.</p><p>Let&#39;s expand on this:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Props</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">user</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Props</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fullName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">first_name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">last_name</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>notice that <code>fullName</code> is NOT using snake case. That&#39;s because <code>fullName</code> is <strong>not a raw value from the api</strong>.</p><p>There is one exception, and that&#39;s <em>calculated fields</em> from the backend.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Props</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">user</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineProps</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Props</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fullName)</span></span>
<span class="line"></span></code></pre></div><p>In the example above, the api has already calculated <code>fullName</code> for us. <code>fullName</code> is not in snake_case so <strong>we know it&#39;s not a raw value and therefore, cannot be changed</strong></p><p>‚ùå</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> userCreator </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCreateResource</span><span style="color:#A6ACCD;">(User)</span></span>
<span class="line"><span style="color:#A6ACCD;">userCreator</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">form</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fullName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Luke Diebold</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &lt;&lt; We know fullName cannot be changed because it&#39;s NOT in snake_case</span></span>
<span class="line"><span style="color:#A6ACCD;">postCreator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>A calculated field is NOT a raw value, and therefore not in snake_case. Again, snake case means &quot;this is a <strong>raw</strong> value from the api&quot;.</p><h2 id="avoiding-name-clashes" tabindex="-1">Avoiding name clashes <a class="header-anchor" href="#avoiding-name-clashes" aria-hidden="true">#</a></h2><p>Sometimes when variable names clash, it&#39;s hard to know how to maintain concise naming, while avoiding the clash. Here&#39;s how we&#39;ll handle these clashes.</p><blockquote><p>The general rule is &quot;be <strong>accurate</strong>, be <strong>specific</strong>&quot;</p></blockquote><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h3><p>Here&#39;s a real world example of how name clashing can be difficult to avoid.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">resourceFinder</span><span style="color:#A6ACCD;"> (id) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  const id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(id)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  function </span><span style="color:#F07178;">find</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  return {</span></span>
<span class="line"><span style="color:#A6ACCD;">    find</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div>`,23),p=[o];function t(c,r,i,C,D,y){return n(),a("div",null,p)}const d=s(e,[["render",t]]);export{F as __pageData,d as default};

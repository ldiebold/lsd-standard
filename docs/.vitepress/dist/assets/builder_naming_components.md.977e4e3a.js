import{_ as e,c as a,o as s,d as n}from"./app.f1aeb96b.js";const m=JSON.parse('{"title":"Naming Components","description":"","frontmatter":{},"headers":[{"level":2,"title":"Layouts","slug":"layouts","link":"#layouts","children":[{"level":3,"title":"Pascal Case","slug":"pascal-case","link":"#pascal-case","children":[]},{"level":3,"title":"Inside Folders","slug":"inside-folders","link":"#inside-folders","children":[]},{"level":3,"title":"Layout and Folder, Same Name","slug":"layout-and-folder-same-name","link":"#layout-and-folder-same-name","children":[]}]},{"level":2,"title":"Pages","slug":"pages","link":"#pages","children":[{"level":3,"title":"Pascal Case","slug":"pascal-case-1","link":"#pascal-case-1","children":[]},{"level":3,"title":"Inside Folders","slug":"inside-folders-1","link":"#inside-folders-1","children":[]},{"level":3,"title":"Page and Folder, Same Name","slug":"page-and-folder-same-name","link":"#page-and-folder-same-name","children":[]}]},{"level":2,"title":"Template: PascalCase for our components, kebab-case for everything else","slug":"template-pascalcase-for-our-components-kebab-case-for-everything-else","link":"#template-pascalcase-for-our-components-kebab-case-for-everything-else","children":[]},{"level":2,"title":"Always pluralize accurately","slug":"always-pluralize-accurately","link":"#always-pluralize-accurately","children":[]},{"level":2,"title":"Naming Pages that manage data","slug":"naming-pages-that-manage-data","link":"#naming-pages-that-manage-data","children":[{"level":3,"title":"Why?","slug":"why","link":"#why","children":[]},{"level":3,"title":"Single action pages","slug":"single-action-pages","link":"#single-action-pages","children":[]}]}],"relativePath":"builder/naming/components.md"}'),l={name:"builder/naming/components.md"},o=n(`<h1 id="naming-components" tabindex="-1">Naming Components <a class="header-anchor" href="#naming-components" aria-hidden="true">#</a></h1><p>We use strict <strong>conventions for naming files</strong>, and placing them in predictible places.</p><p>If learned and followed, these conventions create an <em>invisible line of communication</em> among teams. Less has to be explained, and we can more fluently communicate through our code.</p><p>Take the following as an example:</p><p><code>UserDetailsCard.vue</code></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">q-card-section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      User Info...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">q-card-section</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">q-card</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>If we agree to always match the <strong>name of the Quasar component</strong> with the last <strong>word of the file</strong>, the user of this component instantly has more knowledge.</p><p>For example, we now know we can add Quasar properties to the <code>UserDetailsCard</code> component:</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">UserDetailsCard</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">flat</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">bordered</span></span>
<span class="line"><span style="color:#89DDFF;">  /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>if you know <code>QCard</code></p><h2 id="layouts" tabindex="-1">Layouts <a class="header-anchor" href="#layouts" aria-hidden="true">#</a></h2><p><code>src/layouts/MainLayout/MainLayout.vue</code></p><h3 id="pascal-case" tabindex="-1">Pascal Case <a class="header-anchor" href="#pascal-case" aria-hidden="true">#</a></h3><p>Use Pascal Case</p><h3 id="inside-folders" tabindex="-1">Inside Folders <a class="header-anchor" href="#inside-folders" aria-hidden="true">#</a></h3><p>All layouts must be inside a folder</p><p>This means if the layout gets more complicated, we have an obvious place to extract logic</p><h3 id="layout-and-folder-same-name" tabindex="-1">Layout and Folder, Same Name <a class="header-anchor" href="#layout-and-folder-same-name" aria-hidden="true">#</a></h3><p>The layouts and folders must have the same name</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">MainLayout/MainLayout.vue</span></span>
<span class="line"></span></code></pre></div><p>some prefer to call the file <code>Index.vue</code>. We don&#39;t do this for two reasons</p><ol><li>Vue cannot predict the components name</li><li>It&#39;s harder to find in the IDE when searching (<code>ctrl + p</code>)</li></ol><h2 id="pages" tabindex="-1">Pages <a class="header-anchor" href="#pages" aria-hidden="true">#</a></h2><p><code>src/pages/MainPage/MainPage.vue</code></p><h3 id="pascal-case-1" tabindex="-1">Pascal Case <a class="header-anchor" href="#pascal-case-1" aria-hidden="true">#</a></h3><p>Use Pascal Case</p><h3 id="inside-folders-1" tabindex="-1">Inside Folders <a class="header-anchor" href="#inside-folders-1" aria-hidden="true">#</a></h3><p>All pages must be inside a folder</p><p>This means if the page gets more complicated, we have an obvious place to extract logic</p><h3 id="page-and-folder-same-name" tabindex="-1">Page and Folder, Same Name <a class="header-anchor" href="#page-and-folder-same-name" aria-hidden="true">#</a></h3><p>The pages and folders must have the same name</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">MainPage/MainPage.vue</span></span>
<span class="line"></span></code></pre></div><p>some prefer to call the file <code>Index.vue</code>. We don&#39;t do this for two reasons</p><ol><li>Vue cannot predict the components name</li><li>It&#39;s harder to find in the IDE when searching (<code>ctrl + p</code>)</li></ol><h2 id="template-pascalcase-for-our-components-kebab-case-for-everything-else" tabindex="-1">Template: PascalCase for our components, kebab-case for everything else <a class="header-anchor" href="#template-pascalcase-for-our-components-kebab-case-for-everything-else" aria-hidden="true">#</a></h2><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">q-banner</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    You can manage users below</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">q-banner</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">UsersTable</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Notice that we use <code>q-banner</code> (kebab) for the Quasar component, and <code>UsersTable</code> (pascal) for our custom component.</p><p>We do this for two main reasons:</p><ol><li>Quickly see the difference between a Quasar component, and a custom component</li><li>Pascal is more &quot;double clickable&quot;. It&#39;s more common to select a custom component when coding, and it&#39;s faster to select a pascal component because the <code>-</code> makes this slower with kebab case.</li></ol><h2 id="always-pluralize-accurately" tabindex="-1">Always pluralize accurately <a class="header-anchor" href="#always-pluralize-accurately" aria-hidden="true">#</a></h2><h2 id="naming-pages-that-manage-data" tabindex="-1">Naming Pages that manage data <a class="header-anchor" href="#naming-pages-that-manage-data" aria-hidden="true">#</a></h2><p>For pages that manage data for a resource, we use the word <code>Manage</code> in the file name. Here are some examples:</p><ul><li><code>ManageUsersPage.vue</code></li><li><code>ViewUsersPage.vue</code></li><li><code>ManageUsersView.vue</code></li><li><code>ManageUsersTable.vue</code></li></ul><p>As mentioned in the previous section, be sure to use correct pluralization!</p><ul><li><code>ManageUsersTable.vue</code> is different to</li><li><code>ManageUserTable.vue</code></li></ul><h3 id="why" tabindex="-1">Why? <a class="header-anchor" href="#why" aria-hidden="true">#</a></h3><p>Imagine surfing through the <code>pages</code> folder in an app, and seeing <code>UsersPage.vue</code>.</p><ul><li>Can we delete users on this page?</li><li>Is it only for displaying users?</li></ul><p>It&#39;s too vague and for that reason, we <em>always add a <strong>purpose</strong> word</em> to add immediate context for others devs on our team!</p><h3 id="single-action-pages" tabindex="-1">Single action pages <a class="header-anchor" href="#single-action-pages" aria-hidden="true">#</a></h3><p>In some cases, we may want pages that only perform <strong>one</strong> CRUD operations. Here are some examples of how we&#39;d name such pages:</p><ul><li><code>RemoveUsersPage.vue</code> (we use the word <code>remove</code>, because furthur down the component tree, <code>delete</code> becomes a problematic word)</li><li><code>UpdateUsersPage.vue</code></li><li><code>ViewUsersPage.vue</code></li></ul>`,52),t=[o];function c(p,r,i,d,h,u){return s(),a("div",null,t)}const y=e(l,[["render",c]]);export{m as __pageData,y as default};

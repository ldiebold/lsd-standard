import{_ as e,c as s,o as n,d as o}from"./app.98e9ab83.js";const m=JSON.parse('{"title":"Extracting Logic","description":"","frontmatter":{},"headers":[{"level":2,"title":"Single Context Vs Multi Context Components","slug":"single-context-vs-multi-context-components","link":"#single-context-vs-multi-context-components","children":[]}],"relativePath":"builder/extracting-logic/extracting-logic.md"}'),t={name:"builder/extracting-logic/extracting-logic.md"},a=o(`<h1 id="extracting-logic" tabindex="-1">Extracting Logic <a class="header-anchor" href="#extracting-logic" aria-hidden="true">#</a></h1><p>This is the most important concept we&#39;ll cover. If we don&#39;t know how to extract logic, we don&#39;t know how to create maintainable code.</p><blockquote><p>The key to maintainable code is knowing HOW and WHERE to extract logic.</p></blockquote><p>We&#39;ll cover:</p><ul><li>the how and where of extracting <strong>components</strong> (SFCs)</li><li>the how and where of extracting <strong>logic</strong> (usually composables, sometimes helpers)</li><li>managing complexity (how extracting relates to the <code>page &gt; views &gt; components</code> architecture)</li></ul><h2 id="single-context-vs-multi-context-components" tabindex="-1">Single Context Vs Multi Context Components <a class="header-anchor" href="#single-context-vs-multi-context-components" aria-hidden="true">#</a></h2><p>Usually when extracting components, we want to use the generator:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">hygen new component</span></span>
<span class="line"></span></code></pre></div><p>However, sometimes we want to extract a component that would <strong>never be used somewhere else</strong>. We call these <strong>single context components</strong>.</p><p><strong>Single context components</strong> are created in the same folder they&#39;re used, and <strong>never used anywhere else</strong>. That&#39;s why they&#39;re called <strong>single context components</strong>, because they&#39;re only used in a <strong>one</strong> context.</p><p>Here&#39;s an example of a single context components (UsersTableRow.vue is the single context component):</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki"><code><span class="line"><span style="color:#C3E88D;">üìÅ modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">üìÅ User</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">üìÅ components</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C3E88D;">üìÅ UsersTable</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">UsersTable.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">UsersTableRow.vue</span></span>
<span class="line"></span></code></pre></div><p>In the example above, we could have given <code>UsersTableRow.vue</code> its own folder, but there&#39;s no point. Why is there no point? Because <code>UsersTableRow.vue</code> would <strong>only be used by <code>UsersTable.vue</code></strong>. In other words, <code>UsersTableRow.vue</code> would only be used in one context. In other words, <code>UsersTableRow.vue</code> is a <strong>single context component</strong>. Starting to make sense?</p><p>Again.</p><blockquote><p>Single context components are only ever used in <strong>one context</strong></p></blockquote><p>If our table rows also started to feel like they were getting out of hand, you could also start making components for cells. <strong>This is totally fine!</strong> You&#39;ll probably find that as you get good at extracting logic, it&#39;s very difficult to go &quot;too far&quot;. Small files are <em>usually</em> an indicator of a flexible website that&#39;s easy for other developers to understand.</p><p>It&#39;s also worth noting, you&#39;re welcome to create more folders to help organize our components (In the example below, &quot;cells&quot; gets its own folder so that the cell components don&#39;t flood our <code>UsersTable</code> folder):</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">üìÅ modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    üìÅ User</span></span>
<span class="line"><span style="color:#A6ACCD;">      üìÅ components</span></span>
<span class="line"><span style="color:#A6ACCD;">        üìÅ UsersTable</span></span>
<span class="line"><span style="color:#A6ACCD;">          - UsersTable.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">          - UsersTableRow.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">          üìÅ cells</span></span>
<span class="line"><span style="color:#A6ACCD;">            - NameCell.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">            - EmailCell.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">            - IdCell.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">            - FriendsCell.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">            - DateCreatedCell.vue</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>We have many single context components in the example above! All those cells, and the <code>UsersTableRow.vue</code> file are <strong>single context components</strong>. The only component that would end up being used in a view, is <code>UsersTable.vue</code>.</p><p>That&#39;s actually an important thing to note! A component folder (in this case, <code>UsersTable/</code>) <strong>only ever has one component that gets used, and it always has the same name as the folder.</strong> The only reason we nest these components in folders, is to have a sensible place to extract logic. By the way...</p><p>Ever worked on a project where nobody ever extracted logic, and some files ended up being thousands of lines long? <strong>component folders is part of the solution to enormous, difficult to maintain files.</strong></p>`,21),l=[a];function c(p,r,i,d,g,u){return n(),s("div",null,l)}const y=e(t,[["render",c]]);export{m as __pageData,y as default};
